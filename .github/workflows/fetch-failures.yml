name: Fetch Failures

on:
  workflow_call:
    inputs:
      pr_head_sha:
        required: true
        type: string
      repo_name:
        required: true
        type: string
    outputs:
      markdown_fragment:
        description: "Markdown fragment listing external check failures"
        value: ${{ jobs.detect.outputs.markdown_fragment }}
    secrets:
      GH_TOKEN:
        required: true

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      markdown_fragment: ${{ steps.build-markdown.outputs.markdown_fragment }}
    steps:
      - name: Fetch Statuses (Currents and Argos)
        id: fetch-statuses
        run: |
          echo "Fetching commit statuses for: ${{ inputs.pr_head_sha }} in repo: ${{ inputs.repo_name }}..."

          STATUS_URL="https://api.github.com/repos/${{ inputs.repo_name }}/commits/${{ inputs.pr_head_sha }}/statuses"
          STATUS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$STATUS_URL")

          echo "==== RAW STATUS_RESPONSE ===="
          echo "$STATUS_RESPONSE"
          echo "=============================="

          # Check if STATUS_RESPONSE is valid JSON
          if [ -z "$STATUS_RESPONSE" ]; then
            echo "❌ ERROR: Empty response from GitHub API"
            exit 1
          fi

          if ! echo "$STATUS_RESPONSE" | jq empty; then
            echo "❌ ERROR: Failed to parse STATUS_RESPONSE. Invalid JSON returned."
            exit 1
          fi

          FAILURES_STATUSES=""

          # Currents and Argos app's id's
          ALLOWED_CREATORS=("98385548" "62215774")

          while read -r row; do
            state=$(echo "$row" | jq -r '.state')
            context=$(echo "$row" | jq -r '.context')
            target_url=$(echo "$row" | jq -r '.target_url')
            description=$(echo "$row" | jq -r '.description')
            creator_id=$(echo "$row" | jq -r '.creator.id')

            if [[ "$state" == "failure" ]]; then
              for allowed_id in "${ALLOWED_CREATORS[@]}"; do
                if [[ "$creator_id" == "$allowed_id" ]]; then
                  SAFE_CONTEXT=$(echo "$context" | sed 's/|//g')
                  FAILURES_STATUSES+=$'- ['$SAFE_CONTEXT'|'${target_url:-"#"}'] - '" {{ $description }}"$'\n'
                  break  # No need to check further IDs once matched
                fi
              done
            fi
          done < <(echo "$STATUS_RESPONSE" | jq -c '.[]')

          echo "FAILURES_STATUSES<<EOF" >> $GITHUB_ENV
          echo "$FAILURES_STATUSES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build Markdown Output
        id: build-markdown
        run: |
          if [ -n "$FAILURES_STATUSES" ]; then
            echo "Detected external failures:"
            echo "$FAILURES_STATUSES"

            MARKDOWN="{panel:bgColor=#ffebe6|title=Failing checks}"$'\n'"$FAILURES_STATUSES"$'\n'"{panel}"

            echo "markdown_fragment<<EOF" >> $GITHUB_OUTPUT
            echo "$MARKDOWN" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "✅ No failing statuses detected."
            echo "markdown_fragment=" >> $GITHUB_OUTPUT
          fi
