name: Fetch Workflow Config

on:
  workflow_call:
    outputs:
      mock_mode:
        description: "Whether mock mode is enabled (string true/false)"
        value: ${{ jobs.extract.outputs.mock_mode }}
      high_priority:
        description: "Whether high priority mode is enabled"
        value: ${{ jobs.extract.outputs.high_priority }}
      force_jira:
        description: "Whether force Jira creation is requested even if mock mode is true"
        value: ${{ jobs.extract.outputs.force_jira }}
      additional_info:
        description: "Cleaned comment content, formatted for Jira"
        value: ${{ jobs.extract.outputs.additional_info }}

jobs:
  extract:
    runs-on: ubuntu-latest
    outputs:
      mock_mode: ${{ steps.extract.outputs.mock_mode }}
      high_priority: ${{ steps.extract.outputs.high_priority }}
      force_jira: ${{ steps.extract.outputs.force_jira }}
      additional_info: ${{ steps.extract.outputs.additional_info }}

    steps:
      - name: Parse Comment and Extract Flags
        id: extract
        run: |
          echo "Parsing comment..."

          COMMENT_BODY="${{ github.event.comment.body }}"

          # Initialize flags
          MOCK_MODE="false"
          HIGH_PRIORITY="false"
          FORCE_JIRA="false"

          # Detect flags anywhere in the comment
          if echo "$COMMENT_BODY" | grep -q -- '--mock'; then
            MOCK_MODE="true"
          fi

          if echo "$COMMENT_BODY" | grep -q -- '--today'; then
            HIGH_PRIORITY="true"
          fi

          if echo "$COMMENT_BODY" | grep -q -- '--force-jira'; then
            FORCE_JIRA="true"
          fi

          # Strip leading command and known flags
          CLEANED_COMMENT=$(echo "$COMMENT_BODY" \
            | sed -E 's#^/te-help[[:space:]]*##i' \
            | sed -E 's#--mock##g' \
            | sed -E 's#--today##g' \
            | sed -E 's#--force-jira##g' \
            | sed -E 's#[[:space:]]+$##' \
            | sed -E 's#^[[:space:]]+##')

          # Format additional info (if any remains)
          if [ -n "$CLEANED_COMMENT" ]; then
            FORMATTED_INFO="{panel:bgColor=#eae6ff|title=User notes}"$'\n'"$CLEANED_COMMENT"$'\n'"{panel}"
          else
            FORMATTED_INFO=""
          fi

          # Set outputs
          echo "mock_mode=$MOCK_MODE" >> $GITHUB_OUTPUT
          echo "high_priority=$HIGH_PRIORITY" >> $GITHUB_OUTPUT
          echo "force_jira=$FORCE_JIRA" >> $GITHUB_OUTPUT

          echo "additional_info<<EOF" >> $GITHUB_OUTPUT
          echo "$FORMATTED_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
