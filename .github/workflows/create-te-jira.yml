name: Create Jira Ticket

on:
  workflow_call:
    outputs:
      repo_name:
        description: "Uppercase name of the repository"
        value: ${{ jobs.create-jira-ticket.outputs.repo_name }}
      jira_ticket_id:
        description: "Jira ID of the created Jira ticket"
        value: ${{ jobs.create-jira-ticket.outputs.jira_ticket_id }}
      jira_ticket_url:
        description: "URL of the created Jira ticket"
        value: ${{ jobs.create-jira-ticket.outputs.jira_ticket_url }}

permissions:
  contents: read
  pull-requests: read

jobs:
  fetch-pr-info:
    runs-on: ubuntu-latest
    outputs:
      pr_title: ${{ steps.fetch.outputs.pr_title }}
      pr_head_sha: ${{ steps.fetch.outputs.pr_head_sha }}
    steps:
      - name: Fetch PR Title and Head SHA
        id: fetch
        run: |
          echo "Fetching PR details from repo: ${{ github.repository }} and PR #${{ github.event.issue.number }}..."

          API_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}"
          
          HTTP_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ vars.GHA_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$API_URL")

          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "❌ GitHub API returned HTTP status $HTTP_STATUS"
            echo "Response: $HTTP_BODY"
            exit 1
          fi

          PR_TITLE=$(echo "$HTTP_BODY" | jq -r '.title')
          PR_HEAD_SHA=$(echo "$HTTP_BODY" | jq -r '.head.sha')

          echo "Fetched PR Title: $PR_TITLE"
          echo "Fetched PR Head SHA: $PR_HEAD_SHA"

          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_head_sha=$PR_HEAD_SHA" >> $GITHUB_OUTPUT

  fetch-failures:
    needs: fetch-pr-info
    uses: ./.github/workflows/fetch-failures.yml
    with:
      pr_head_sha: ${{ needs.fetch-pr-info.outputs.pr_head_sha }}
      repo_name: ${{ github.repository }}

  create-jira-ticket:
    needs: [fetch-pr-info, fetch-failures]
    runs-on: ubuntu-latest
    env:
      JIRA_BASE_URL: ${{ vars.JIRA_SITE_URL }}
      JIRA_USER_EMAIL: ${{ vars.JIRA_API_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    outputs:
      repo_name: ${{ steps.set-url.outputs.repo_name }}
      jira_ticket_id: ${{ steps.set-url.outputs.id }}
      jira_ticket_url: ${{ steps.set-url.outputs.url }}
    steps:
      - name: Authenticate with Jira 
        uses: atlassian/gajira-login@v3

      - name: Set repository name in uppercase
        id: set_repo_name
        run: |
          echo "REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2 | tr 'a-z' 'A-Z')" >> $GITHUB_ENV

      - name: Build Jira Ticket Description
        id: build-description
        env:
          MARKDOWN_FRAGMENT: ${{ needs.fetch-failures.outputs.markdown_fragment }}
        run: |
          base_description="A request for Test Engineering support was submitted via a GitHub Pull Request."

          if [ -n "$MARKDOWN_FRAGMENT" ]; then
            final_description="$base_description

            $MARKDOWN_FRAGMENT"
          else
            final_description="$base_description"
          fi

          echo "Final Jira Description:"
          echo "$final_description"

          echo "FINAL_DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$final_description" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Jira issue (real)
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: GH
          issuetype: Task
          summary: >
            [${{ env.REPO_NAME }}] Issue detected on PR #${{ github.event.issue.number }}: ${{ needs.fetch-pr-info.outputs.pr_title }}
          description: |
            A request for Test Engineering support was submitted via a GitHub Pull Request.

            **Repository:** `${{ env.REPO_NAME }}`  
            **Pull Request:** [#${{ github.event.issue.number }} - ${{ github.event.issue.title }}](${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.issue.number }})  
            **Requested by:** [@${{ github.event.comment.user.login }}](https://github.com/${{ github.event.comment.user.login }})

            ${{ env.FINAL_DESCRIPTION }}

            Please review the PR and keep the ticket up-to-date with the progress status.

      - name: Assign Jira Ticket
        run: |
          accountId=$(curl -s -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -G --data-urlencode "query=$JIRA_USER_EMAIL" \
            "$JIRA_BASE_URL/rest/api/3/user/search" | jq -r '.[0].accountId')

          if [ -z "$accountId" ] || [ "$accountId" = "null" ]; then
            echo "⚠️ No Jira account ID found for $JIRA_USER_EMAIL. Skipping assignment."
            exit 0
          fi

          echo "Assigning ticket to accountId: $accountId"

          curl -X PUT -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg accountId "$accountId" '{accountId: $accountId}')" \
            "$JIRA_BASE_URL/rest/api/3/issue/${{ steps.create.outputs.issue }}/assignee"

      - name: Transition Jira Issue to "Open"
        run: |
          curl -X POST -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"transition":{"id":"21"}}' \
            "$JIRA_BASE_URL/rest/api/3/issue/${{ steps.create.outputs.issue }}/transitions"

      - name: Set Output Data
        id: set-url
        run: |
          echo "repo_name=$(echo '${{ github.repository }}' | cut -d'/' -f2 | tr 'a-z' 'A-Z')" >> $GITHUB_OUTPUT
          echo "id=${{ steps.create.outputs.issue }}" >> $GITHUB_OUTPUT
          echo "url=$JIRA_BASE_URL/browse/${{ steps.create.outputs.issue }}"
