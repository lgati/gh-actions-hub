name: Create Jira Ticket

on:
  workflow_call:
    inputs:
      jira_base_url:
        required: true
        type: string
      jira_user_email:
        required: true
        type: string
      mock_mode:
        required: false
        type: string
      high_priority:
        required: false
        type: string
      force_jira:
        required: false
        type: string
      additional_info:
        required: false
        type: string
    outputs:
      jira_ticket_id:
        description: "Jira ID of the created Jira ticket"
        value: ${{ jobs.create-jira-ticket.outputs.jira_ticket_id }}
      jira_ticket_url:
        description: "URL of the created Jira ticket"
        value: ${{ jobs.create-jira-ticket.outputs.jira_ticket_url }}
    secrets:
      GH_TOKEN:
        required: true
      JIRA_API_TOKEN:
        required: true

permissions:
  contents: read
  pull-requests: read

jobs:
  fetch-failures:
    uses: ./.github/workflows/fetch-failures.yml
    with:
      mock_mode: ${{ inputs.mock_mode }}
    secrets: inherit

  create-jira-ticket:
    if: ${{ inputs.mock_mode != 'true' || inputs.force_jira == 'true' }}
    needs: fetch-failures
    runs-on: ubuntu-latest
    env:
      JIRA_BASE_URL: ${{ inputs.jira_base_url }}
      JIRA_USER_EMAIL: ${{ inputs.jira_user_email }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    outputs:
      jira_ticket_id: ${{ steps.create.outputs.issue }}
      jira_ticket_url: ${{ inputs.jira_base_url }}/browse/${{ steps.create.outputs.issue  }}
    steps:
      - name: Authenticate with Jira 
        uses: atlassian/gajira-login@v3

      - name: Format Jira Fields
        id: set_fields
        run: |
          REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2 | tr 'a-z' 'A-Z')
          echo "repo_name=$REPO_NAME"  >> $GITHUB_OUTPUT

          if [ "${{ inputs.high_priority }}" == "true" ]; then
            PRIORITY_JSON='"priority":{"name":"High"}'
            DUEDATE_JSON=$(date +'"duedate":"%Y-%m-%d"')
            FIELDS="{${PRIORITY_JSON},${DUEDATE_JSON}}"
          else
            FIELDS="{}"
          fi

          echo "jira_fields=$FIELDS" >> $GITHUB_OUTPUT

      - name: Create Jira issue
        id: create
        if: ${{ inputs.mock_mode != 'true' || inputs.force_jira == 'true' }}
        uses: atlassian/gajira-create@v3
        with:
          project: GH
          issuetype: Task
          summary: >
            [${{ steps.set_fields.outputs.repo_name }}] Issue detected on PR #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          description: |
            {panel}
            *Pull Request:* ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.issue.number }}
            *Requested by:* [@${{ github.event.comment.user.login }}|https://github.com/${{ github.event.comment.user.login }}]
            {panel}

            ${{ inputs.additional_info }}

            ${{ needs.fetch-failures.outputs.markdown_fragment }}

            {panel:bgColor=#fefae6}
            Please review the failing checks and keep the ticket up-to-date with the progress status.
            {panel}
          fields: ${{ steps.set_fields.outputs.jira_fields }}

      - name: Assign Jira Ticket
        if: steps.create.conclusion == 'success'
        run: |
          accountId=$(curl -s -u "${{ inputs.jira_user_email }}:$JIRA_API_TOKEN" \
            -G --data-urlencode "query=${{ inputs.jira_user_email }}" \
            "${{ inputs.jira_base_url }}/rest/api/3/user/search" | jq -r '.[0].accountId')

          if [ -z "$accountId" ] || [ "$accountId" = "null" ]; then
            echo "⚠️ No Jira account ID found for ${{ inputs.jira_user_email }}. Skipping assignment."
            exit 0
          fi

          echo "Assigning ticket to accountId: $accountId"

          curl -X PUT -u "${{ inputs.jira_user_email }}:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$(jq -n --arg accountId "$accountId" '{accountId: $accountId}')" \
            "${{ inputs.jira_base_url }}/rest/api/3/issue/${{ steps.create.outputs.issue }}/assignee"

      - name: Transition Jira Issue to "Open"
        if: steps.create.conclusion == 'success'
        run: |
          curl -X POST -u "${{ inputs.jira_user_email }}:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"transition":{"id":"21"}}' \
            "${{ inputs.jira_base_url }}/rest/api/3/issue/${{ steps.create.outputs.issue }}/transitions"
